{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","webpackCompilationHash":"67c8befa5d3dbc266561","result":{"data":{"deck":{"id":"b7ca3891-bede-5a7b-9f80-c172140026e0","body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar theme = github;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Rxjs Practice \\uD83D\\uDC4B\"), mdx(\"p\", null, \"Pokemon\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: github,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon12, {\n    mdxType: \"Pokemon12\"\n  }))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github, nightOwl],\n    sizes: [2, 1, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Create rawPokemon$' subtitle='Store'\",\n    \"showNumbers\": true,\n    \"title\": \"'Create\",\n    \"rawPokemon$'\": true,\n    \"subtitle\": \"'Store'\"\n  }, \"import {BehaviorSubject} from 'rxjs'\\n\\nexport const rawPokemon$ = new BehaviorSubject<Pokemon[]>([]);\\n\")), mdx(\"div\", {\n    style: {\n      fontSize: '20px'\n    }\n  }, \"hello rawPokemon$\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Subscribe to data' subtitle='App component'\",\n    \"showNumbers\": true,\n    \"title\": \"'Subscribe\",\n    \"to\": true,\n    \"data'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { useEffect } from 'react';\\nimport { rawPokemon$ } from '../store';\\n\\nfunction App () {\\n\\n    return <div>hello rawPokemon$</div>;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Provide data' subtitle='Store'\",\n    \"showNumbers\": true,\n    \"title\": \"'Provide\",\n    \"data'\": true,\n    \"subtitle\": \"'Store'\"\n  }, \"import {BehaviorSubject} from 'rxjs'\\n\\nexport const rawPokemon$ = new BehaviorSubject<Pokemon[]>([]);\\n\\nfetch('/pokemon-simplified.json')\\n  .then((res) => res.json())\\n  .then((data) => rawPokemon$.next(data));\\n\")), mdx(Pokemon1, {\n    mdxType: \"Pokemon1\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Getting the data' subtitle='App component'\",\n    \"showNumbers\": true,\n    \"title\": \"'Getting\",\n    \"the\": true,\n    \"data'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { useEffect } from 'react';\\nimport { rawPokemon$ } from '../store';\\n\\nfunction App () {\\n    useEffect(() => {\\n        const sub = rawPokemon$.subscribe(console.log);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    return <div>hello rawPokemon$</div>;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers subtitle='Store'\",\n    \"showNumbers\": true,\n    \"subtitle\": \"'Store'\"\n  }, \"import {BehaviorSubject} from 'rxjs'\\n\\nexport const rawPokemon$ = new BehaviorSubject<Pokemon[]>([]);\\n\\nfetch('/pokemon-simplified.json')\\n  .then((res) => res.json())\\n  .then((data) => rawPokemon$.next(data));\\n\")), mdx(Pokemon1, {\n    mdxType: \"Pokemon1\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers subtitle='App component'\",\n    \"showNumbers\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { useEffect } from 'react';\\nimport { rawPokemon$ } from '../store';\\n\\nfunction App () {\\n    useEffect(() => {\\n        const sub = rawPokemon$.subscribe(console.log);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    return <div>hello rawPokemon$</div>;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1:18 showNumbers title='Create pokemonWithPower$ with pipe' subtitle='Store'\",\n    \"1:18\": true,\n    \"showNumbers\": true,\n    \"title\": \"'Create\",\n    \"pokemonWithPower$\": true,\n    \"with\": true,\n    \"pipe'\": true,\n    \"subtitle\": \"'Store'\"\n  }, \"import { BehaviorSubject, map } from 'rxjs';\\n\\nconst rawPokemon$ = new BehaviorSubject([]);\\n\\nexport const pokemonWithPower$ = rawPokemon$.pipe(\\n    map((pokemon) =>\\n      pokemon.map((p) => ({\\n        ...p,\\n        power:\\n          p.hp +\\n          p.attack +\\n          p.defense +\\n          p.special_attack +\\n          p.special_defense +\\n          p.speed,\\n      }))\\n    )\\n  );\\n\\nfetch('http://localhost:3005/pokemon')\\n  .then((res) => res.json())\\n  .then((data) => rawPokemon$.next(data));\\n\")), mdx(Pokemon2, {\n    mdxType: \"Pokemon2\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Use pokemonWithPower$ instead' subtitle='App component'\",\n    \"showNumbers\": true,\n    \"title\": \"'Use\",\n    \"pokemonWithPower$\": true,\n    \"instead'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { useEffect } from 'react';\\nimport { pokemonWithPower$ } from '../store';\\n\\nfunction App () {\\n    useEffect(() => {\\n        const sub = pokemonWithPower$.subscribe(console.log);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    return <div>hello pokemonWithPower$</div>;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers subtitle='Store'\",\n    \"showNumbers\": true,\n    \"subtitle\": \"'Store'\"\n  }, \"import { BehaviorSubject, map } from 'rxjs';\\n\\nconst rawPokemon$ = new BehaviorSubject([]);\\n\\nexport const pokemonWithPower$ = rawPokemon$.pipe(\\n    map((pokemon) =>\\n      pokemon.map((p) => ({\\n        ...p,\\n        power:\\n          p.hp +\\n          p.attack +\\n          p.defense +\\n          p.special_attack +\\n          p.special_defense +\\n          p.speed,\\n      }))\\n    )\\n  );\\n\\nfetch('http://localhost:3005/pokemon')\\n  .then((res) => res.json())\\n  .then((data) => rawPokemon$.next(data));\\n\")), mdx(Pokemon2, {\n    mdxType: \"Pokemon2\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers subtitle='App component'\",\n    \"showNumbers\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { useEffect } from 'react';\\nimport { pokemonWithPower$ } from '../store';\\n\\nfunction App () {\\n    useEffect(() => {\\n        const sub = pokemonWithPower$.subscribe(console.log);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    return <div>hello pokemonWithPower$</div>;\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, nightOwl],\n    sizes: [1, 1],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon2, {\n    mdxType: \"Pokemon2\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Creating the search UI' subtitle='App component'\",\n    \"showNumbers\": true,\n    \"title\": \"'Creating\",\n    \"the\": true,\n    \"search\": true,\n    \"UI'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { useEffect } from 'react';\\nimport { pokemonWithPower$ } from '../store';\\n\\nfunction App () {\\n    useEffect(() => {\\n        const sub = pokemonWithPower$.subscribe(console.log);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    return <div>hello pokemonWithPower$</div>;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon2, {\n    mdxType: \"Pokemon2\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Creating the search module' subtitle='App component'\",\n    \"showNumbers\": true,\n    \"title\": \"'Creating\",\n    \"the\": true,\n    \"search\": true,\n    \"module'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { useEffect } from 'react';\\nimport { pokemonWithPower$ } from '../store';\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n    useEffect(() => {\\n        const sub = pokemonWithPower$.subscribe(console.log);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    return <div>hello pokemonWithPower$</div>;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon3, {\n    mdxType: \"Pokemon3\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Apply the search module' subtitle='App component'\",\n    \"showNumbers\": true,\n    \"title\": \"'Apply\",\n    \"the\": true,\n    \"search\": true,\n    \"module'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { useEffect } from 'react';\\nimport { pokemonWithPower$ } from '../store';\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n    useEffect(() => {\\n        const sub = pokemonWithPower$.subscribe(console.log);\\n        return () => sub.unsubscribe();\\n    }, []);\\n      \\n    return (\\n      <div style={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: \\\"1fr 1fr\\\",\\n      }}>\\n          <Search />\\n          hello pokemonWithPower$\\n      </div>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon4, {\n    mdxType: \"Pokemon4\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Modify the search module' subtitle='App component'\",\n    \"showNumbers\": true,\n    \"title\": \"'Modify\",\n    \"the\": true,\n    \"search\": true,\n    \"module'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo, useEffect } from 'react';\\nimport { pokemonWithPower$ } from '../store';\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const [pokemon, setPokemon] = useState<Pokemon[]>([]);\\n\\n    useEffect(() => {\\n        const sub = pokemonWithPower$.subscribe(setPokemon);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <div style={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: \\\"1fr 1fr\\\",\\n      }}>\\n          <Search />\\n          hello pokemonWithPower$\\n      </div>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon5, {\n    mdxType: \"Pokemon5\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Modify the search module' subtitle='App component'\",\n    \"showNumbers\": true,\n    \"title\": \"'Modify\",\n    \"the\": true,\n    \"search\": true,\n    \"module'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo, useEffect } from 'react';\\nimport { pokemonWithPower$ } from '../store';\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const [pokemon, setPokemon] = useState<Pokemon[]>([]);\\n\\n    useEffect(() => {\\n        const sub = pokemonWithPower$.subscribe(setPokemon);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <div style={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: \\\"1fr 1fr\\\",\\n      }}>\\n          <Search />\\n          hello pokemonWithPower$\\n      </div>\\n    );\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    sizes: [2, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Support selection' subtitle='Store'\",\n    \"showNumbers\": true,\n    \"title\": \"'Support\",\n    \"selection'\": true,\n    \"subtitle\": \"'Store'\"\n  }, \"import { BehaviorSubject, map } from 'rxjs';\\n\\nconst rawPokemon$ = new BehaviorSubject([]);\\n\\nexport const pokemonWithPower$ = rawPokemon$.pipe(\\n    map((pokemon) =>\\n      pokemon.map((p) => ({\\n        ...p,\\n        power:\\n          p.hp +\\n          p.attack +\\n          p.defense +\\n          p.special_attack +\\n          p.special_defense +\\n          p.speed,\\n      }))\\n    )\\n  );\\n\\nfetch('http://localhost:3005/pokemon')\\n  .then((res) => res.json())\\n  .then((data) => rawPokemon$.next(data));\\n\")), mdx(Pokemon5, {\n    mdxType: \"Pokemon5\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers subtitle='Store'\",\n    \"showNumbers\": true,\n    \"subtitle\": \"'Store'\"\n  }, \"import { BehaviorSubject, map } from 'rxjs';\\n\\nconst rawPokemon$ = new BehaviorSubject([]);\\n\\nexport const pokemonWithPower$ = rawPokemon$.pipe(\\n    map((pokemon) =>\\n      pokemon.map((p) => ({\\n        ...p,\\n        power:\\n          p.hp +\\n          p.attack +\\n          p.defense +\\n          p.special_attack +\\n          p.special_defense +\\n          p.speed,\\n      }))\\n    )\\n  );\\n\\nexport const selected$ = new BehaviorSubject<number[]>([]);\\n\\nfetch('http://localhost:3005/pokemon')\\n  .then((res) => res.json())\\n  .then((data) => rawPokemon$.next(data));\\n\")), mdx(Pokemon5, {\n    mdxType: \"Pokemon5\"\n  }))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, nightOwl],\n    sizes: [1, 1],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon5, {\n    mdxType: \"Pokemon5\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers subtitle='App component'\",\n    \"showNumbers\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo, useEffect } from 'react';\\nimport { pokemonWithPower$ } from '../store';\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const [pokemon, setPokemon] = useState<Pokemon[]>([]);\\n\\n    useEffect(() => {\\n        const sub = pokemonWithPower$.subscribe(setPokemon);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <div style={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: \\\"1fr 1fr\\\",\\n      }}>\\n          <Search />\\n          hello pokemonWithPower$\\n      </div>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon6, {\n    mdxType: \"Pokemon6\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers subtitle='App component'\",\n    \"showNumbers\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo, useEffect } from 'react';\\nimport { pokemonWithPower$, selected$ } from '../store';\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const [pokemon, setPokemon] = useState<Pokemon[]>([]);\\n\\n    useEffect(() => {\\n        const sub = pokemonWithPower$.subscribe(setPokemon);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={selected$.value.includes(p.id)}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <div style={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: \\\"1fr 1fr\\\",\\n      }}>\\n          <Search />\\n          hello pokemonWithPower$\\n      </div>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon6, {\n    mdxType: \"Pokemon6\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2,27:37 showNumbers title='Opps... selected$ actually changed' subtitle='App component'\",\n    \"2,27:37\": true,\n    \"showNumbers\": true,\n    \"title\": \"'Opps...\",\n    \"selected$\": true,\n    \"actually\": true,\n    \"changed'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo, useEffect } from 'react';\\nimport { pokemonWithPower$, selected$ } from '../store';\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const [pokemon, setPokemon] = useState<Pokemon[]>([]);\\n\\n    useEffect(() => {\\n        const sub = pokemonWithPower$.subscribe(setPokemon);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={selected$.value.includes(p.id)}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <div style={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: \\\"1fr 1fr\\\",\\n      }}>\\n          <Search />\\n          hello pokemonWithPower$\\n      </div>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon6, {\n    mdxType: \"Pokemon6\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"6,8:11 showNumbers title='fix: could connect selected$ with state?' subtitle='fix: alter pokemon to add selected value'\",\n    \"6,8:11\": true,\n    \"showNumbers\": true,\n    \"title\": \"'fix:\",\n    \"could\": true,\n    \"connect\": true,\n    \"selected$\": true,\n    \"with\": true,\n    \"state?'\": true,\n    \"subtitle\": \"'fix:\",\n    \"alter\": true,\n    \"pokemon\": true,\n    \"to\": true,\n    \"add\": true,\n    \"selected\": true,\n    \"value'\": true\n  }, \"import React, { usestate, useMemo, useEffect } from 'react';\\nimport { pokemonWithPower$, selected$ } from '../store';\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const [pokemon, setPokemon] = useState<Pokemon[]>([]);\\n\\n    useEffect(() => {\\n        const sub = pokemonWithPower$.subscribe(setPokemon);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={selected$.value.includes(p.id)}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <div style={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: \\\"1fr 1fr\\\",\\n      }}>\\n          <Search />\\n          hello pokemonWithPower$\\n      </div>\\n    );\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    sizes: [2, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers subtitle='Store'\",\n    \"showNumbers\": true,\n    \"subtitle\": \"'Store'\"\n  }, \"import { BehaviorSubject, map } from 'rxjs';\\n\\nconst rawPokemon$ = new BehaviorSubject([]);\\n\\nexport const pokemonWithPower$ = rawPokemon$.pipe(\\n    map((pokemon) =>\\n      pokemon.map((p) => ({\\n        ...p,\\n        power:\\n          p.hp +\\n          p.attack +\\n          p.defense +\\n          p.special_attack +\\n          p.special_defense +\\n          p.speed,\\n      }))\\n    )\\n  );\\n\\nexport const selected$ = new BehaviorSubject<number[]>([]);\\n\\nfetch('http://localhost:3005/pokemon')\\n  .then((res) => res.json())\\n  .then((data) => rawPokemon$.next(data));\\n\")), mdx(Pokemon6, {\n    mdxType: \"Pokemon6\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Create pokemon$ with selected' subtitle='Store'\",\n    \"showNumbers\": true,\n    \"title\": \"'Create\",\n    \"pokemon$\": true,\n    \"with\": true,\n    \"selected'\": true,\n    \"subtitle\": \"'Store'\"\n  }, \"import { BehaviorSubject, map, combineLatestWith } from 'rxjs';\\n\\nconst rawPokemon$ = new BehaviorSubject([]);\\n\\nexport const pokemonWithPower$ = rawPokemon$.pipe(\\n    map((pokemon) =>\\n      pokemon.map((p) => ({\\n        ...p,\\n        power:\\n          p.hp +\\n          p.attack +\\n          p.defense +\\n          p.special_attack +\\n          p.special_defense +\\n          p.speed,\\n      }))\\n    )\\n  );\\n\\nexport const selected$ = new BehaviorSubject<number[]>([]);\\n\\nexport const pokemon$ = pokemonWithPower$.pipe(\\n  combineLatestWith(selected$),\\n  map(([pokemon, selected]) =>\\n    pokemon.map((p) => ({\\n      ...p,\\n      selected: selected.includes(p.id),\\n    }))\\n  )\\n);\\n\\nfetch('http://localhost:3005/pokemon')\\n  .then((res) => res.json())\\n  .then((data) => rawPokemon$.next(data));\\n\")), mdx(Pokemon6, {\n    mdxType: \"Pokemon6\"\n  }))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, nightOwl],\n    sizes: [1, 1],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon6, {\n    mdxType: \"Pokemon6\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers subtitle='App component'\",\n    \"showNumbers\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo, useEffect } from 'react';\\nimport { pokemonWithPower$, selected$ } from '../store';\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const [pokemon, setPokemon] = useState<Pokemon[]>([]);\\n\\n    useEffect(() => {\\n        const sub = pokemonWithPower$.subscribe(setPokemon);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={selected$.value.includes(p.id)}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <div style={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: \\\"1fr 1fr\\\",\\n      }}>\\n          <Search />\\n          hello pokemonWithPower$\\n      </div>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon7, {\n    mdxType: \"Pokemon7\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='use pokemon$ instead' subtitle='App component'\",\n    \"showNumbers\": true,\n    \"title\": \"'use\",\n    \"pokemon$\": true,\n    \"instead'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo, useEffect } from 'react';\\nimport { selected$, pokemon$ } from '../store';\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const [pokemon, setPokemon] = useState<Pokemon[]>([]);\\n\\n    useEffect(() => {\\n        const sub = pokemon$.subscribe(setPokemon);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={p.selected}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <div style={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: \\\"1fr 1fr\\\",\\n      }}>\\n          <Search />\\n          hello pokemonWithPower$\\n      </div>\\n    );\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    sizes: [2, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='create a deck' subtitle='Store'\",\n    \"showNumbers\": true,\n    \"title\": \"'create\",\n    \"a\": true,\n    \"deck'\": true,\n    \"subtitle\": \"'Store'\"\n  }, \"import { BehaviorSubject, map, combineLatestWith } from 'rxjs';\\n\\nconst rawPokemon$ = new BehaviorSubject([]);\\n\\nexport const pokemonWithPower$ = rawPokemon$.pipe(\\n    map((pokemon) =>\\n      pokemon.map((p) => ({\\n        ...p,\\n        power:\\n          p.hp +\\n          p.attack +\\n          p.defense +\\n          p.special_attack +\\n          p.special_defense +\\n          p.speed,\\n      }))\\n    )\\n  );\\n\\nexport const selected$ = new BehaviorSubject<number[]>([]);\\n\\nexport const pokemon$ = pokemonWithPower$.pipe(\\n  combineLatestWith(selected$),\\n  map(([pokemon, selected]) =>\\n    pokemon.map((p) => ({\\n      ...p,\\n      selected: selected.includes(p.id),\\n    }))\\n  )\\n);\\n\\nfetch('http://localhost:3005/pokemon')\\n  .then((res) => res.json())\\n  .then((data) => rawPokemon$.next(data));\\n\")), mdx(Pokemon7, {\n    mdxType: \"Pokemon7\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Create a deck$' subtitle='Store'\",\n    \"showNumbers\": true,\n    \"title\": \"'Create\",\n    \"a\": true,\n    \"deck$'\": true,\n    \"subtitle\": \"'Store'\"\n  }, \"import { BehaviorSubject, map, combineLatestWith } from 'rxjs';\\n\\nconst rawPokemon$ = new BehaviorSubject([]);\\n\\nexport const pokemonWithPower$ = rawPokemon$.pipe(\\n    map((pokemon) =>\\n      pokemon.map((p) => ({\\n        ...p,\\n        power:\\n          p.hp +\\n          p.attack +\\n          p.defense +\\n          p.special_attack +\\n          p.special_defense +\\n          p.speed,\\n      }))\\n    )\\n  );\\n\\nexport const selected$ = new BehaviorSubject<number[]>([]);\\n\\nexport const pokemon$ = pokemonWithPower$.pipe(\\n  combineLatestWith(selected$),\\n  map(([pokemon, selected]) =>\\n    pokemon.map((p) => ({\\n      ...p,\\n      selected: selected.includes(p.id),\\n    }))\\n  )\\n);\\n\\nexport const deck$ = pokemon$.pipe(\\n  map((pokemon) => pokemon.filter((p) => p.selected))\\n);\\n\\nfetch('http://localhost:3005/pokemon')\\n  .then((res) => res.json())\\n  .then((data) => rawPokemon$.next(data));\\n\")), mdx(Pokemon7, {\n    mdxType: \"Pokemon7\"\n  }))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, nightOwl],\n    sizes: [1, 1],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon7, {\n    mdxType: \"Pokemon7\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers subtitle='App component'\",\n    \"showNumbers\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo, useEffect } from 'react';\\nimport { selected$, pokemon$ } from '../store';\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const [pokemon, setPokemon] = useState<Pokemon[]>([]);\\n\\n    useEffect(() => {\\n        const sub = pokemon$.subscribe(setPokemon);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={p.selected}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <div style={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: \\\"1fr 1fr\\\",\\n      }}>\\n          <Search />\\n          hello pokemonWithPower$\\n      </div>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon8, {\n    mdxType: \"Pokemon8\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2,4:6,20  showNumbers title='Bring in deck$ and create deck module' subtitle='App component'\",\n    \"2,4:6,20\": true,\n    \"\": true,\n    \"showNumbers\": true,\n    \"title\": \"'Bring\",\n    \"in\": true,\n    \"deck$\": true,\n    \"and\": true,\n    \"create\": true,\n    \"deck\": true,\n    \"module'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo, useEffect } from 'react';\\nimport { selected$, pokemon$, deck$ } from '../store';\\n\\nconst Deck = () => {\\n    return <h4>Deck</h4>\\n}\\n\\nconst Search = () => {\\n    ...\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <div style={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: \\\"1fr 1fr\\\",\\n      }}>\\n          <Search />\\n          <Deck />\\n      </div>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon8, {\n    mdxType: \"Pokemon8\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"4:6,10,12:15  showNumbers title='could use useState and useEffect to manage deck state?' subtitle='or use Observable Hooks easily'\",\n    \"4:6,10,12:15\": true,\n    \"\": true,\n    \"showNumbers\": true,\n    \"title\": \"'could\",\n    \"use\": true,\n    \"useState\": true,\n    \"and\": true,\n    \"useEffect\": true,\n    \"to\": true,\n    \"manage\": true,\n    \"deck\": true,\n    \"state?'\": true,\n    \"subtitle\": \"'or\",\n    \"Observable\": true,\n    \"Hooks\": true,\n    \"easily'\": true\n  }, \"import React, { usestate, useMemo, useEffect } from 'react';\\nimport { selected$, pokemon$, deck$ } from '../store';\\n\\nconst Deck = () => {\\n    return <h4>Deck</h4>\\n}\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const [pokemon, setPokemon] = useState<Pokemon[]>([]);\\n\\n    useEffect(() => {\\n        const sub = pokemon$.subscribe(setPokemon);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={p.selected}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <div style={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: \\\"1fr 1fr\\\",\\n      }}>\\n          <Search />\\n          <Deck />\\n      </div>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon9, {\n    mdxType: \"Pokemon9\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='use useObservableState hooks' subtitle='App component'\",\n    \"showNumbers\": true,\n    \"title\": \"'use\",\n    \"useObservableState\": true,\n    \"hooks'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo, useEffect } from 'react';\\nimport { selected$, pokemon$, deck$ } from '../store';\\nimport { useObservableState } from \\\"observable-hooks\\\";\\n\\nconst Deck = () => {\\n    const deck = useObservableState(deck$, []);\\n\\n    return (\\n        <div>\\n          <h4>Deck</h4>\\n          <div>\\n              {deck.map((p) => (\\n                <div key={p.id} style={{ display: \\\"flex\\\" }}>\\n                    <img\\n                    src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${p.id}.png`}\\n                    alt={p.name}\\n                    />\\n                    <div>\\n                    <div>{p.name}</div>\\n                    </div>\\n                </div>\\n              ))}\\n          </div>\\n        </div>\\n    );\\n}\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const [pokemon, setPokemon] = useState<Pokemon[]>([]);\\n\\n    useEffect(() => {\\n        const sub = pokemon$.subscribe(setPokemon);\\n        return () => sub.unsubscribe();\\n    }, []);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={p.selected}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <div style={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: \\\"1fr 1fr\\\",\\n      }}>\\n          <Search />\\n          <Deck />\\n      </div>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon9, {\n    mdxType: \"Pokemon9\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='use useObservableState again and remove useEffect' subtitle='App component'\",\n    \"showNumbers\": true,\n    \"title\": \"'use\",\n    \"useObservableState\": true,\n    \"again\": true,\n    \"and\": true,\n    \"remove\": true,\n    \"useEffect'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo } from 'react';\\nimport { selected$, pokemon$, deck$ } from '../store';\\nimport { useObservableState } from \\\"observable-hooks\\\";\\n\\nconst Deck = () => {\\n    const deck = useObservableState(deck$, []);\\n\\n    return (\\n        <div>\\n          <h4>Deck</h4>\\n          <div>\\n              {deck.map((p) => (\\n                <div key={p.id} style={{ display: \\\"flex\\\" }}>\\n                    <img\\n                    src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${p.id}.png`}\\n                    alt={p.name}\\n                    />\\n                    <div>\\n                    <div>{p.name}</div>\\n                    </div>\\n                </div>\\n              ))}\\n          </div>\\n        </div>\\n    );\\n}\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const pokemon = useObservableState(pokemon$,[]);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={p.selected}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <div style={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: \\\"1fr 1fr\\\",\\n      }}>\\n          <Search />\\n          <Deck />\\n      </div>\\n    );\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    sizes: [2, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Using Context' subtitle='Store'\",\n    \"showNumbers\": true,\n    \"title\": \"'Using\",\n    \"Context'\": true,\n    \"subtitle\": \"'Store'\"\n  }, \"import { BehaviorSubject, map, combineLatestWith } from 'rxjs';\\n\\nconst rawPokemon$ = new BehaviorSubject([]);\\n\\nexport const pokemonWithPower$ = rawPokemon$.pipe(\\n    map((pokemon) =>\\n      pokemon.map((p) => ({\\n        ...p,\\n        power:\\n          p.hp +\\n          p.attack +\\n          p.defense +\\n          p.special_attack +\\n          p.special_defense +\\n          p.speed,\\n      }))\\n    )\\n  );\\n\\nexport const selected$ = new BehaviorSubject<number[]>([]);\\n\\nexport const pokemon$ = pokemonWithPower$.pipe(\\n  combineLatestWith(selected$),\\n  map(([pokemon, selected]) =>\\n    pokemon.map((p) => ({\\n      ...p,\\n      selected: selected.includes(p.id),\\n    }))\\n  )\\n);\\n\\nexport const deck$ = pokemon$.pipe(\\n  map((pokemon) => pokemon.filter((p) => p.selected))\\n);\\n\\nfetch('http://localhost:3005/pokemon')\\n  .then((res) => res.json())\\n  .then((data) => rawPokemon$.next(data));\\n\")), mdx(Pokemon9, {\n    mdxType: \"Pokemon9\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Create context' subtitle='Store'\",\n    \"showNumbers\": true,\n    \"title\": \"'Create\",\n    \"context'\": true,\n    \"subtitle\": \"'Store'\"\n  }, \"import { createContext } from 'react';\\nimport { BehaviorSubject, map, combineLatestWith } from 'rxjs';\\n\\nconst rawPokemon$ = new BehaviorSubject([]);\\n\\nexport const pokemonWithPower$ = rawPokemon$.pipe(\\n    map((pokemon) =>\\n      pokemon.map((p) => ({\\n        ...p,\\n        power:\\n          p.hp +\\n          p.attack +\\n          p.defense +\\n          p.special_attack +\\n          p.special_defense +\\n          p.speed,\\n      }))\\n    )\\n  );\\n\\nexport const selected$ = new BehaviorSubject<number[]>([]);\\n\\nexport const pokemon$ = pokemonWithPower$.pipe(\\n  combineLatestWith(selected$),\\n  map(([pokemon, selected]) =>\\n    pokemon.map((p) => ({\\n      ...p,\\n      selected: selected.includes(p.id),\\n    }))\\n  )\\n);\\n\\nexport const deck$ = pokemon$.pipe(\\n  map((pokemon) => pokemon.filter((p) => p.selected))\\n);\\n\\nconst PokemonContext = createContext({\\n  pokemon$,\\n  selected$,\\n  deck$,\\n});\\n\\nfetch('http://localhost:3005/pokemon')\\n  .then((res) => res.json())\\n  .then((data) => rawPokemon$.next(data));\\n\")), mdx(Pokemon9, {\n    mdxType: \"Pokemon9\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Create provider' subtitle='Store'\",\n    \"showNumbers\": true,\n    \"title\": \"'Create\",\n    \"provider'\": true,\n    \"subtitle\": \"'Store'\"\n  }, \"import { createContext } from 'react';\\nimport { BehaviorSubject, map, combineLatestWith } from 'rxjs';\\n\\nconst rawPokemon$ = new BehaviorSubject([]);\\n\\nexport const pokemonWithPower$ = rawPokemon$.pipe(\\n    map((pokemon) =>\\n      pokemon.map((p) => ({\\n        ...p,\\n        power:\\n          p.hp +\\n          p.attack +\\n          p.defense +\\n          p.special_attack +\\n          p.special_defense +\\n          p.speed,\\n      }))\\n    )\\n  );\\n\\nexport const selected$ = new BehaviorSubject<number[]>([]);\\n\\nexport const pokemon$ = pokemonWithPower$.pipe(\\n  combineLatestWith(selected$),\\n  map(([pokemon, selected]) =>\\n    pokemon.map((p) => ({\\n      ...p,\\n      selected: selected.includes(p.id),\\n    }))\\n  )\\n);\\n\\nexport const deck$ = pokemon$.pipe(\\n  map((pokemon) => pokemon.filter((p) => p.selected))\\n);\\n\\nconst PokemonContext = createContext({\\n  pokemon$,\\n  selected$,\\n  deck$,\\n});\\n\\nexport const PokemonProvider: React.FunctionComponent = ({ children }) => (\\n  <PokemonContext.Provider\\n    value={{\\n      pokemon$,\\n      selected$,\\n      deck$,\\n    }}\\n  >\\n    {children}\\n  </PokemonContext.Provider>\\n);\\n\\nfetch('http://localhost:3005/pokemon')\\n  .then((res) => res.json())\\n  .then((data) => rawPokemon$.next(data));\\n\")), mdx(Pokemon9, {\n    mdxType: \"Pokemon9\"\n  }))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, nightOwl],\n    sizes: [1, 1],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon9, {\n    mdxType: \"Pokemon9\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers subtitle='App component'\",\n    \"showNumbers\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo } from 'react';\\nimport { selected$, pokemon$, deck$ } from '../store';\\nimport { useObservableState } from \\\"observable-hooks\\\";\\n\\nconst Deck = () => {\\n    const deck = useObservableState(deck$, []);\\n\\n    return (\\n        <div>\\n          <h4>Deck</h4>\\n          <div>\\n              {deck.map((p) => (\\n                <div key={p.id} style={{ display: \\\"flex\\\" }}>\\n                    <img\\n                    src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${p.id}.png`}\\n                    alt={p.name}\\n                    />\\n                    <div>\\n                    <div>{p.name}</div>\\n                    </div>\\n                </div>\\n              ))}\\n          </div>\\n        </div>\\n    );\\n}\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const pokemon = useObservableState(pokemon$,[]);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={p.selected}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <div style={{\\n          display: \\\"grid\\\",\\n          gridTemplateColumns: \\\"1fr 1fr\\\",\\n      }}>\\n          <Search />\\n          <Deck />\\n      </div>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon10, {\n    mdxType: \"Pokemon10\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2,10:18 showNumbers title='Use PokemonProvider' subtitle='App component'\",\n    \"2,10:18\": true,\n    \"showNumbers\": true,\n    \"title\": \"'Use\",\n    \"PokemonProvider'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo } from 'react';\\nimport { selected$, pokemon$, deck$, PokemonProvider } from '../store';\\nimport { useObservableState } from \\\"observable-hooks\\\";\\n\\n...\\n\\nfunction App () {\\n      \\n    return (\\n      <PokemonProvider>\\n          <div style={{\\n              display: \\\"grid\\\",\\n              gridTemplateColumns: \\\"1fr 1fr\\\",\\n          }}>\\n              <Search />\\n              <Deck />\\n          </div>\\n      </PokemonProvider>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon10, {\n    mdxType: \"Pokemon10\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2,6,30 showNumbers title='No need for importing individually' subtitle='App component'\",\n    \"2,6,30\": true,\n    \"showNumbers\": true,\n    \"title\": \"'No\",\n    \"need\": true,\n    \"for\": true,\n    \"importing\": true,\n    \"individually'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo } from 'react';\\nimport { selected$, pokemon$, deck$, PokemonProvider } from '../store';\\nimport { useObservableState } from \\\"observable-hooks\\\";\\n\\nconst Deck = () => {\\n    const deck = useObservableState(deck$, []);\\n\\n    return (\\n        <div>\\n          <h4>Deck</h4>\\n          <div>\\n              {deck.map((p) => (\\n                <div key={p.id} style={{ display: \\\"flex\\\" }}>\\n                    <img\\n                    src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${p.id}.png`}\\n                    alt={p.name}\\n                    />\\n                    <div>\\n                    <div>{p.name}</div>\\n                    </div>\\n                </div>\\n              ))}\\n          </div>\\n        </div>\\n    );\\n}\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const pokemon = useObservableState(pokemon$,[]);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={p.selected}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <PokemonProvider>\\n          <div style={{\\n              display: \\\"grid\\\",\\n              gridTemplateColumns: \\\"1fr 1fr\\\",\\n          }}>\\n              <Search />\\n              <Deck />\\n          </div>\\n      </PokemonProvider>\\n    );\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    sizes: [2, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1,14 showNumbers title='Create customer hooks' subtitle='Store'\",\n    \"1,14\": true,\n    \"showNumbers\": true,\n    \"title\": \"'Create\",\n    \"customer\": true,\n    \"hooks'\": true,\n    \"subtitle\": \"'Store'\"\n  }, \"import { createContext, useContext } from 'react';\\nimport { BehaviorSubject, map, combineLatestWith } from 'rxjs';\\n\\nconst rawPokemon$ = new BehaviorSubject([]);\\n\\n...\\n\\nconst PokemonContext = createContext({\\n  pokemon$,\\n  selected$,\\n  deck$,\\n});\\n\\nexport const usePokemon = () => useContext(PokemonContext);\\n\\nexport const PokemonProvider: React.FunctionComponent = ({ children }) => (\\n  <PokemonContext.Provider\\n    value={{\\n      pokemon$,\\n      selected$,\\n      deck$,\\n    }}\\n  >\\n    {children}\\n  </PokemonContext.Provider>\\n);\\n\\nfetch('http://localhost:3005/pokemon')\\n  .then((res) => res.json())\\n  .then((data) => rawPokemon$.next(data));\\n\")), mdx(Pokemon10, {\n    mdxType: \"Pokemon10\"\n  }))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [github, nightOwl],\n    sizes: [1, 1],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon11, {\n    mdxType: \"Pokemon11\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2,6,31 showNumbers title='use usePokemon hooks' subtitle='App component'\",\n    \"2,6,31\": true,\n    \"showNumbers\": true,\n    \"title\": \"'use\",\n    \"usePokemon\": true,\n    \"hooks'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo } from 'react';\\nimport { PokemonProvider } from '../store';\\nimport { useObservableState } from \\\"observable-hooks\\\";\\n\\nconst Deck = () => {\\n    const { deck$ } = usePokemon();\\n    const deck = useObservableState(deck$, []);\\n\\n    return (\\n        <div>\\n          <h4>Deck</h4>\\n          <div>\\n              {deck.map((p) => (\\n                <div key={p.id} style={{ display: \\\"flex\\\" }}>\\n                    <img\\n                    src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${p.id}.png`}\\n                    alt={p.name}\\n                    />\\n                    <div>\\n                    <div>{p.name}</div>\\n                    </div>\\n                </div>\\n              ))}\\n          </div>\\n        </div>\\n    );\\n}\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const { pokemon$, selected$ } = usePokemon();\\n    const pokemon = useObservableState(pokemon$,[]);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={p.selected}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <PokemonProvider>\\n          <div style={{\\n              display: \\\"grid\\\",\\n              gridTemplateColumns: \\\"1fr 1fr\\\",\\n          }}>\\n              <Search />\\n              <Deck />\\n          </div>\\n      </PokemonProvider>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon11, {\n    mdxType: \"Pokemon11\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"30\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"30 showNumbers title='Using Rxjs for all the state' subtitle='App component'\",\n    \"showNumbers\": true,\n    \"title\": \"'Using\",\n    \"Rxjs\": true,\n    \"for\": true,\n    \"all\": true,\n    \"the\": true,\n    \"state'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { usestate, useMemo } from 'react';\\nimport { PokemonProvider } from '../store';\\nimport { useObservableState } from \\\"observable-hooks\\\";\\n\\nconst Deck = () => {\\n    const { deck$ } = usePokemon();\\n    const deck = useObservableState(deck$, []);\\n\\n    return (\\n        <div>\\n          <h4>Deck</h4>\\n          <div>\\n              {deck.map((p) => (\\n                <div key={p.id} style={{ display: \\\"flex\\\" }}>\\n                    <img\\n                    src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${p.id}.png`}\\n                    alt={p.name}\\n                    />\\n                    <div>\\n                    <div>{p.name}</div>\\n                    </div>\\n                </div>\\n              ))}\\n          </div>\\n        </div>\\n    );\\n}\\n\\nconst Search = () => {\\n    const [search, setSearch] = useState<string>('');\\n    const { pokemon$, selected$ } = usePokemon();\\n    const pokemon = useObservableState(pokemon$,[]);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => setSearch(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={p.selected}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <PokemonProvider>\\n          <div style={{\\n              display: \\\"grid\\\",\\n              gridTemplateColumns: \\\"1fr 1fr\\\",\\n          }}>\\n              <Search />\\n              <Deck />\\n          </div>\\n      </PokemonProvider>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon11, {\n    mdxType: \"Pokemon11\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Use search$ instead' subtitle='App component'\",\n    \"showNumbers\": true,\n    \"title\": \"'Use\",\n    \"search$\": true,\n    \"instead'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { useMemo } from 'react';\\nimport { PokemonProvider } from '../store';\\nimport { useObservableState } from \\\"observable-hooks\\\";\\nimport { BehaviorSubject } from 'rxjs';\\n\\nconst Deck = () => {\\n    const { deck$ } = usePokemon();\\n    const deck = useObservableState(deck$, []);\\n\\n    return (\\n        <div>\\n          <h4>Deck</h4>\\n          <div>\\n              {deck.map((p) => (\\n                <div key={p.id} style={{ display: \\\"flex\\\" }}>\\n                    <img\\n                    src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${p.id}.png`}\\n                    alt={p.name}\\n                    />\\n                    <div>\\n                    <div>{p.name}</div>\\n                    </div>\\n                </div>\\n              ))}\\n          </div>\\n        </div>\\n    );\\n}\\n\\nconst Search = () => {\\n    const search$ = useMemo(() => new BehaviorSubject<string>(''), []);\\n    const { pokemon$, selected$ } = usePokemon();\\n    const pokemon = useObservableState(pokemon$,[]);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => search$.next(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={p.selected}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <PokemonProvider>\\n          <div style={{\\n              display: \\\"grid\\\",\\n              gridTemplateColumns: \\\"1fr 1fr\\\",\\n          }}>\\n              <Search />\\n              <Deck />\\n          </div>\\n      </PokemonProvider>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon11, {\n    mdxType: \"Pokemon11\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"35:37 showNumbers title='Modify filteredPokemon' subtitle='App component'\",\n    \"35:37\": true,\n    \"showNumbers\": true,\n    \"title\": \"'Modify\",\n    \"filteredPokemon'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { useMemo } from 'react';\\nimport { PokemonProvider } from '../store';\\nimport { useObservableState } from \\\"observable-hooks\\\";\\nimport { BehaviorSubject } from 'rxjs';\\n\\nconst Deck = () => {\\n    const { deck$ } = usePokemon();\\n    const deck = useObservableState(deck$, []);\\n\\n    return (\\n        <div>\\n          <h4>Deck</h4>\\n          <div>\\n              {deck.map((p) => (\\n                <div key={p.id} style={{ display: \\\"flex\\\" }}>\\n                    <img\\n                    src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${p.id}.png`}\\n                    alt={p.name}\\n                    />\\n                    <div>\\n                    <div>{p.name}</div>\\n                    </div>\\n                </div>\\n              ))}\\n          </div>\\n        </div>\\n    );\\n}\\n\\nconst Search = () => {\\n    const search$ = useMemo(() => new BehaviorSubject<string>(''), []);\\n    const { pokemon$, selected$ } = usePokemon();\\n    const pokemon = useObservableState(pokemon$,[]);\\n\\n    const filteredPokemon = useMemo(() => {\\n        return pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));\\n    }, [pokemon, search]);\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search}\\n                onChange={(e) => search$.next(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={p.selected}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <PokemonProvider>\\n          <div style={{\\n              display: \\\"grid\\\",\\n              gridTemplateColumns: \\\"1fr 1fr\\\",\\n          }}>\\n              <Search />\\n              <Deck />\\n          </div>\\n      </PokemonProvider>\\n    );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon12, {\n    mdxType: \"Pokemon12\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showNumbers title='Modify filteredPokemon' subtitle='App component'\",\n    \"showNumbers\": true,\n    \"title\": \"'Modify\",\n    \"filteredPokemon'\": true,\n    \"subtitle\": \"'App\",\n    \"component'\": true\n  }, \"import React, { useMemo } from 'react';\\nimport { PokemonProvider } from '../store';\\nimport { useObservableState } from \\\"observable-hooks\\\";\\nimport { BehaviorSubject, map, combineLatestWith } from 'rxjs';\\n\\nconst Deck = () => {\\n    const { deck$ } = usePokemon();\\n    const deck = useObservableState(deck$, []);\\n\\n    return (\\n        <div>\\n          <h4>Deck</h4>\\n          <div>\\n              {deck.map((p) => (\\n                <div key={p.id} style={{ display: \\\"flex\\\" }}>\\n                    <img\\n                    src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${p.id}.png`}\\n                    alt={p.name}\\n                    />\\n                    <div>\\n                    <div>{p.name}</div>\\n                    </div>\\n                </div>\\n              ))}\\n          </div>\\n        </div>\\n    );\\n}\\n\\nconst Search = () => {\\n    const search$ = useMemo(() => new BehaviorSubject<string>(''), []);\\n    const { pokemon$, selected$ } = usePokemon();\\n    const pokemon = useObservableState(pokemon$,[]);\\n\\n    const [filteredPokemon] = useObservableState(\\n      () =>\\n        pokemon$.pipe(\\n          combineLatestWith(search$),\\n          map(([pokemon, search]) =>\\n            pokemon.filter((p) =>\\n              p.name.toLowerCase().includes(search.toLowerCase())\\n            )\\n          )\\n        ),\\n      []\\n    );\\n  \\n    return (\\n        <div>\\n            <input\\n                style={{fontSize: 'xx-large', width: '100%'}}\\n                type='text'\\n                value={search$.value}\\n                onChange={(e) => search$.next(e.target.value)}\\n            />\\n            {filteredPokemon.map((p) => (\\n                <div key={p.name}>\\n                    <input\\n                      type=\\\"checkbox\\\"\\n                      checked={p.selected}\\n                      onChange={() => {\\n                          if (selected$.value.includes(p.id)) {\\n                          selected$.next(selected$.value.filter((id) => id !== p.id));\\n                          } else {\\n                          selected$.next([...selected$.value, p.id]);\\n                          }\\n                      }}\\n                    />\\n                    <strong>{p.name}</strong> - {p.power}\\n                </div>\\n            ))}\\n        </div>\\n    );\\n}\\n\\nfunction App () {\\n      \\n    return (\\n      <PokemonProvider>\\n          <div style={{\\n              display: \\\"grid\\\",\\n              gridTemplateColumns: \\\"1fr 1fr\\\",\\n          }}>\\n              <Search />\\n              <Deck />\\n          </div>\\n      </PokemonProvider>\\n    );\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl, github],\n    sizes: [1, 1],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(Pokemon11, {\n    mdxType: \"Pokemon11\"\n  }), mdx(Cool, {\n    mdxType: \"Cool\"\n  }))), mdx(\"hr\", null));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b7ca3891-bede-5a7b-9f80-c172140026e0","slug":"","title":"Rxjs Practice 👋"}}}